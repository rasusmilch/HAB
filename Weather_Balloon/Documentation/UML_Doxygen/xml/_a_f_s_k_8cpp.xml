<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.11">
  <compounddef id="_a_f_s_k_8cpp" kind="file" language="C++">
    <compoundname>AFSK.cpp</compoundname>
    <includes local="no">string.h</includes>
    <includes refid="_a_f_s_k_8h" local="yes">AFSK.h</includes>
    <includes local="yes">Arduino.h</includes>
    <incdepgraph>
      <node id="1008">
        <label>stdbool.h</label>
      </node>
      <node id="1007">
        <label>stdint.h</label>
      </node>
      <node id="1002">
        <label>Weather_Balloon/library/LibAPRS/AFSK.cpp</label>
        <link refid="AFSK.cpp"/>
        <childnode refid="1003" relation="include">
        </childnode>
        <childnode refid="1004" relation="include">
        </childnode>
        <childnode refid="1015" relation="include">
        </childnode>
      </node>
      <node id="1011">
        <label>FIFO.h</label>
        <link refid="_f_i_f_o_8h"/>
        <childnode refid="1012" relation="include">
        </childnode>
        <childnode refid="1013" relation="include">
        </childnode>
      </node>
      <node id="1014">
        <label>HDLC.h</label>
        <link refid="_h_d_l_c_8h"/>
      </node>
      <node id="1012">
        <label>stddef.h</label>
      </node>
      <node id="1013">
        <label>util/atomic.h</label>
      </node>
      <node id="1004">
        <label>AFSK.h</label>
        <link refid="_a_f_s_k_8h"/>
        <childnode refid="1005" relation="include">
        </childnode>
        <childnode refid="1007" relation="include">
        </childnode>
        <childnode refid="1008" relation="include">
        </childnode>
        <childnode refid="1009" relation="include">
        </childnode>
        <childnode refid="1010" relation="include">
        </childnode>
        <childnode refid="1011" relation="include">
        </childnode>
        <childnode refid="1014" relation="include">
        </childnode>
      </node>
      <node id="1003">
        <label>string.h</label>
      </node>
      <node id="1006">
        <label>constants.h</label>
        <link refid="constants_8h"/>
      </node>
      <node id="1010">
        <label>avr/pgmspace.h</label>
      </node>
      <node id="1015">
        <label>Arduino.h</label>
      </node>
      <node id="1009">
        <label>stdio.h</label>
      </node>
      <node id="1005">
        <label>device.h</label>
        <link refid="device_8h"/>
        <childnode refid="1006" relation="include">
        </childnode>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="_a_f_s_k_8cpp_1aca36a8e2b3f8db1978f37152c411201c" prot="public" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long custom_preamble</definition>
        <argsstring></argsstring>
        <name>custom_preamble</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Weather_Balloon/library/LibAPRS/AFSK.cpp" line="5" column="1" bodyfile="Weather_Balloon/library/LibAPRS/LibAPRS.cpp" bodystart="13" bodyend="-1"/>
        <referencedby refid="_a_f_s_k_8h_1a8d929ae28fa1de2980b46e953fcf0980" compoundref="_a_f_s_k_8cpp" startline="60" endline="78">AFSK_init</referencedby>
        <referencedby refid="_lib_a_p_r_s_8h_1a8d2879844f6f9808dc5a101f6eb74e4c" compoundref="_lib_a_p_r_s_8cpp" startline="116" endline="118">APRS_setPreamble</referencedby>
        <referencedby refid="_lib_a_p_r_s_8h_1a3fffb640ed02c57078f50fd7289c352d" compoundref="_lib_a_p_r_s_8cpp" startline="178" endline="195">APRS_printSettings</referencedby>
      </memberdef>
      <memberdef kind="variable" id="_a_f_s_k_8cpp_1a258d100e9191b0a720dee2230b376abe" prot="public" static="no" mutable="no">
        <type>unsigned long</type>
        <definition>unsigned long custom_tail</definition>
        <argsstring></argsstring>
        <name>custom_tail</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Weather_Balloon/library/LibAPRS/AFSK.cpp" line="6" column="1" bodyfile="Weather_Balloon/library/LibAPRS/LibAPRS.cpp" bodystart="14" bodyend="-1"/>
        <referencedby refid="_a_f_s_k_8h_1a8d929ae28fa1de2980b46e953fcf0980" compoundref="_a_f_s_k_8cpp" startline="60" endline="78">AFSK_init</referencedby>
        <referencedby refid="_lib_a_p_r_s_8h_1ab32765e29df288da61f2bda8cf13e276" compoundref="_lib_a_p_r_s_8cpp" startline="120" endline="122">APRS_setTail</referencedby>
        <referencedby refid="_lib_a_p_r_s_8h_1a3fffb640ed02c57078f50fd7289c352d" compoundref="_lib_a_p_r_s_8cpp" startline="178" endline="195">APRS_printSettings</referencedby>
      </memberdef>
      <memberdef kind="variable" id="_a_f_s_k_8cpp_1a2986d8cf0562c17f61a0e69f0548b54d" prot="public" static="no" mutable="no">
        <type>int</type>
        <definition>int LibAPRS_vref</definition>
        <argsstring></argsstring>
        <name>LibAPRS_vref</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Weather_Balloon/library/LibAPRS/AFSK.cpp" line="7" column="1" bodyfile="Weather_Balloon/library/LibAPRS/LibAPRS.cpp" bodystart="10" bodyend="-1"/>
        <referencedby refid="_a_f_s_k_8cpp_1aa88a0244c6e90a933c8292d9ea347d42" compoundref="_a_f_s_k_8cpp" startline="19" endline="26">AFSK_hw_refDetect</referencedby>
      </memberdef>
      <memberdef kind="variable" id="_a_f_s_k_8cpp_1a2218d613dcf94d2a7c6385575ffb7955" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool LibAPRS_open_squelch</definition>
        <argsstring></argsstring>
        <name>LibAPRS_open_squelch</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Weather_Balloon/library/LibAPRS/AFSK.cpp" line="8" column="1" bodyfile="Weather_Balloon/library/LibAPRS/LibAPRS.cpp" bodystart="11" bodyend="-1"/>
        <referencedby refid="_a_f_s_k_8cpp_1aafcba3655264de89dda891b98d661b59" compoundref="_a_f_s_k_8cpp" startline="117" endline="176">AFSK_dac_isr</referencedby>
      </memberdef>
      <memberdef kind="variable" id="_a_f_s_k_8cpp_1a2ef8aff82c650b3ae4024239ae8f912b" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool hw_afsk_dac_isr</definition>
        <argsstring></argsstring>
        <name>hw_afsk_dac_isr</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Weather_Balloon/library/LibAPRS/AFSK.cpp" line="10" column="1" bodyfile="Weather_Balloon/library/LibAPRS/AFSK.cpp" bodystart="10" bodyend="-1"/>
        <referencedby refid="_a_f_s_k_8cpp_1a05c2e5b588ced1cd7312f5b0edc5b295" compoundref="_a_f_s_k_8cpp" startline="461" endline="475">ISR</referencedby>
      </memberdef>
      <memberdef kind="variable" id="_a_f_s_k_8cpp_1aac7b2c86b4c563916a405e1d9322de7a" prot="public" static="no" mutable="no">
        <type>bool</type>
        <definition>bool hw_5v_ref</definition>
        <argsstring></argsstring>
        <name>hw_5v_ref</name>
        <initializer>= false</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Weather_Balloon/library/LibAPRS/AFSK.cpp" line="11" column="1" bodyfile="Weather_Balloon/library/LibAPRS/AFSK.cpp" bodystart="11" bodyend="-1"/>
        <referencedby refid="_a_f_s_k_8cpp_1aa88a0244c6e90a933c8292d9ea347d42" compoundref="_a_f_s_k_8cpp" startline="19" endline="26">AFSK_hw_refDetect</referencedby>
        <referencedby refid="_a_f_s_k_8cpp_1a3ec4dcd4db71db9100c3f30c594b1ab0" compoundref="_a_f_s_k_8cpp" startline="28" endline="58">AFSK_hw_init</referencedby>
      </memberdef>
      <memberdef kind="variable" id="_a_f_s_k_8cpp_1aaae334b59062ff32a1371ab9a9925efc" prot="public" static="no" mutable="no">
        <type><ref refid="struct_afsk" kindref="compound">Afsk</ref> *</type>
        <definition>Afsk* AFSK_modem</definition>
        <argsstring></argsstring>
        <name>AFSK_modem</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Weather_Balloon/library/LibAPRS/AFSK.cpp" line="12" column="1" bodyfile="Weather_Balloon/library/LibAPRS/AFSK.cpp" bodystart="12" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="_a_f_s_k_8cpp_1a849ed7993cbf4eeb7976810c3b5f526c" prot="public" static="no" mutable="no">
        <type>uint8_t</type>
        <definition>uint8_t poll_timer</definition>
        <argsstring></argsstring>
        <name>poll_timer</name>
        <initializer>= 0</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Weather_Balloon/library/LibAPRS/AFSK.cpp" line="460" column="1" bodyfile="Weather_Balloon/library/LibAPRS/AFSK.cpp" bodystart="460" bodyend="-1"/>
        <referencedby refid="_a_f_s_k_8cpp_1a05c2e5b588ced1cd7312f5b0edc5b295" compoundref="_a_f_s_k_8cpp" startline="461" endline="475">ISR</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="_a_f_s_k_8cpp_1a52e815cce13ae490f2fed9988b75c16c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int afsk_getchar</definition>
        <argsstring>(void)</argsstring>
        <name>afsk_getchar</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Weather_Balloon/library/LibAPRS/AFSK.cpp" line="16" column="1" bodyfile="Weather_Balloon/library/LibAPRS/AFSK.cpp" bodystart="101" bodyend="107"/>
        <references refid="_f_i_f_o_8h_1aaa89b948af7949dff7c34fd6142f9e0a" compoundref="_f_i_f_o_8h" startline="46" endline="52">fifo_isempty_locked</references>
        <references refid="struct_afsk_1ac37f5dab53ed2219bbfc0d4c3f2f25b8" compoundref="_a_f_s_k_8h" startline="96">Afsk::rxFifo</references>
        <references refid="_f_i_f_o_8h_1a2f05edf7653b62251dd66c7ae7ad1bb7" compoundref="_f_i_f_o_8h" startline="68" endline="74">fifo_pop_locked</references>
        <referencedby refid="_a_x25_8h_1a852682ef0f0f2764ea1dbacebfa2a4e7" compoundref="_a_x25_8cpp" startline="60" endline="99">ax25_poll</referencedby>
      </memberdef>
      <memberdef kind="function" id="_a_f_s_k_8cpp_1a68893c6a77f5945c30a7528e9841e5f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void afsk_putchar</definition>
        <argsstring>(char c)</argsstring>
        <name>afsk_putchar</name>
        <param>
          <type>char</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Weather_Balloon/library/LibAPRS/AFSK.cpp" line="17" column="1" bodyfile="Weather_Balloon/library/LibAPRS/AFSK.cpp" bodystart="95" bodyend="99"/>
        <references refid="_f_i_f_o_8h_1aa11a35c25acb9584a1d452227a70f63d" compoundref="_f_i_f_o_8h" startline="54" endline="60">fifo_isfull_locked</references>
        <references refid="struct_afsk_1a987e70d174e5cd82f73563d920273cc4" compoundref="_a_f_s_k_8h" startline="87">Afsk::txFifo</references>
        <references refid="_f_i_f_o_8h_1af5fb2815bc19265354c00c25a4dc8994" compoundref="_f_i_f_o_8h" startline="62" endline="66">fifo_push_locked</references>
        <referencedby refid="_a_f_s_k_8h_1adb7d23f979900b693df4f80b24e3eca1" compoundref="_a_f_s_k_8cpp" startline="109" endline="115">AFSK_transmit</referencedby>
        <referencedby refid="_a_x25_8h_1a852682ef0f0f2764ea1dbacebfa2a4e7" compoundref="_a_x25_8cpp" startline="60" endline="99">ax25_poll</referencedby>
        <referencedby refid="_a_x25_8h_1ab37e8746a65819795b43d43072ce4555" compoundref="_a_x25_8cpp" startline="108" endline="120">ax25_sendRaw</referencedby>
        <referencedby refid="_a_x25_8h_1aeb4be1c44c0faeb1fc73dbb04ac59a6e" compoundref="_a_x25_8cpp" startline="141" endline="164">ax25_sendVia</referencedby>
      </memberdef>
      <memberdef kind="function" id="_a_f_s_k_8cpp_1aa88a0244c6e90a933c8292d9ea347d42" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AFSK_hw_refDetect</definition>
        <argsstring>(void)</argsstring>
        <name>AFSK_hw_refDetect</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Weather_Balloon/library/LibAPRS/AFSK.cpp" line="19" column="1" bodyfile="Weather_Balloon/library/LibAPRS/AFSK.cpp" bodystart="19" bodyend="26"/>
        <references refid="_a_f_s_k_8cpp_1a2986d8cf0562c17f61a0e69f0548b54d" compoundref="_lib_a_p_r_s_8cpp" startline="10">LibAPRS_vref</references>
        <references refid="_a_f_s_k_8cpp_1aac7b2c86b4c563916a405e1d9322de7a" compoundref="_a_f_s_k_8cpp" startline="11">hw_5v_ref</references>
        <referencedby refid="_a_f_s_k_8cpp_1a3ec4dcd4db71db9100c3f30c594b1ab0" compoundref="_a_f_s_k_8cpp" startline="28" endline="58">AFSK_hw_init</referencedby>
      </memberdef>
      <memberdef kind="function" id="_a_f_s_k_8cpp_1a3ec4dcd4db71db9100c3f30c594b1ab0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AFSK_hw_init</definition>
        <argsstring>(void)</argsstring>
        <name>AFSK_hw_init</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Weather_Balloon/library/LibAPRS/AFSK.cpp" line="28" column="1" bodyfile="Weather_Balloon/library/LibAPRS/AFSK.cpp" bodystart="28" bodyend="58"/>
        <references refid="_a_f_s_k_8cpp_1aa88a0244c6e90a933c8292d9ea347d42" compoundref="_a_f_s_k_8cpp" startline="19" endline="26">AFSK_hw_refDetect</references>
        <references refid="_a_f_s_k_8h_1ab6b652797b16c31087c6e7fef45cc175" compoundref="_a_f_s_k_8h" startline="39">CPU_FREQ</references>
        <references refid="device_8h_1ae0c5f12cd1a193d30e4e05bbe86ce45e" compoundref="device_8h" startline="16">FREQUENCY_CORRECTION</references>
        <references refid="_a_f_s_k_8cpp_1aac7b2c86b4c563916a405e1d9322de7a" compoundref="_a_f_s_k_8cpp" startline="11">hw_5v_ref</references>
        <references refid="device_8h_1a6f53fbd627478c7f56cdb17b5aa3ff44" compoundref="device_8h" startline="29">ADC_DDR</references>
        <references refid="device_8h_1a1c6ce969ab3d12ac37f62c399a1e02c1" compoundref="device_8h" startline="28">ADC_PORT</references>
        <references refid="_a_f_s_k_8h_1aac8110aa28bbf5739a39e186ad3ebc86" compoundref="_a_f_s_k_8h" startline="116">AFSK_DAC_INIT</references>
        <references refid="_a_f_s_k_8h_1a49a66c2203851e33ecbdb2e678f9663a" compoundref="_a_f_s_k_8h" startline="123">LED_TX_INIT</references>
        <references refid="_a_f_s_k_8h_1aa2ae7f3b8cfd16929ff5ce9f19601c72" compoundref="_a_f_s_k_8h" startline="127">LED_RX_INIT</references>
        <referencedby refid="_a_f_s_k_8h_1a8d929ae28fa1de2980b46e953fcf0980" compoundref="_a_f_s_k_8cpp" startline="60" endline="78">AFSK_init</referencedby>
      </memberdef>
      <memberdef kind="function" id="_a_f_s_k_8cpp_1a8d929ae28fa1de2980b46e953fcf0980" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AFSK_init</definition>
        <argsstring>(Afsk *afsk)</argsstring>
        <name>AFSK_init</name>
        <param>
          <type><ref refid="struct_afsk" kindref="compound">Afsk</ref> *</type>
          <declname>afsk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Weather_Balloon/library/LibAPRS/AFSK.cpp" line="60" column="1" bodyfile="Weather_Balloon/library/LibAPRS/AFSK.cpp" bodystart="60" bodyend="78"/>
        <references refid="struct_afsk_1ae5f800f21b5aa819af756c5572e63cce" compoundref="_a_f_s_k_8h" startline="85">Afsk::phaseInc</references>
        <references refid="_a_f_s_k_8h_1a3c7a6dbceee6762f12aa23e4930592e1" compoundref="_a_f_s_k_8h" startline="111">MARK_INC</references>
        <references refid="_f_i_f_o_8h_1ae09eab69a9cb5c4d330aa248db01b5af" compoundref="_f_i_f_o_8h" startline="76" endline="79">fifo_init</references>
        <references refid="struct_afsk_1a326b5be68b2c9bb6191ac8d76a021999" compoundref="_a_f_s_k_8h" startline="93">Afsk::delayFifo</references>
        <references refid="struct_afsk_1aab24e087341259c5e3f9008a8557644e" compoundref="_a_f_s_k_8h" startline="94">Afsk::delayBuf</references>
        <references refid="struct_afsk_1ac37f5dab53ed2219bbfc0d4c3f2f25b8" compoundref="_a_f_s_k_8h" startline="96">Afsk::rxFifo</references>
        <references refid="struct_afsk_1a8c7ee9d7b92796ccc7c3257b581695cb" compoundref="_a_f_s_k_8h" startline="97">Afsk::rxBuf</references>
        <references refid="struct_afsk_1a987e70d174e5cd82f73563d920273cc4" compoundref="_a_f_s_k_8h" startline="87">Afsk::txFifo</references>
        <references refid="struct_afsk_1a32162873b8784efe43d3f28289c6ea6e" compoundref="_a_f_s_k_8h" startline="88">Afsk::txBuf</references>
        <references refid="_r_t_clib_8cpp_1acb559820d9ca11295b4500f179ef6392" compoundref="_r_t_clib_8cpp" startline="18">i</references>
        <references refid="_a_f_s_k_8h_1a15440d8d1e6efc47a3263ccf91a8cb74" compoundref="_a_f_s_k_8h" startline="48">SAMPLESPERBIT</references>
        <references refid="_f_i_f_o_8h_1af58b59a5f3814ca6c0415a66797ab9f7" compoundref="_f_i_f_o_8h" startline="23" endline="31">fifo_push</references>
        <references refid="_a_f_s_k_8cpp_1a3ec4dcd4db71db9100c3f30c594b1ab0" compoundref="_a_f_s_k_8cpp" startline="28" endline="58">AFSK_hw_init</references>
        <references refid="struct_afsk_1aea4204b922aaf2c78708bacec08d7888" compoundref="_a_f_s_k_8h" startline="90">Afsk::sending</references>
        <references refid="struct_afsk_1aa62658bb66ca18cf3d268258ef126283" compoundref="_a_f_s_k_8h" startline="84">Afsk::phaseAcc</references>
        <references refid="struct_afsk_1ab6ea81ad33d9cf98080a6e567cfd7887" compoundref="_a_f_s_k_8h" startline="82">Afsk::bitstuffCount</references>
        <references refid="_a_f_s_k_8h_1aa492cbe1864040a6233dd82239534438" compoundref="_a_f_s_k_8h" startline="124">LED_TX_ON</references>
        <references refid="struct_afsk_1a586542863e66d99dbb7b655fa54af563" compoundref="_a_f_s_k_8h" startline="73">Afsk::preambleLength</references>
        <references refid="_a_f_s_k_8h_1a1ddec5826f8a1f9010183107bb77c06d" compoundref="_a_f_s_k_8h" startline="110">DIV_ROUND</references>
        <references refid="_a_f_s_k_8cpp_1aca36a8e2b3f8db1978f37152c411201c" compoundref="_lib_a_p_r_s_8cpp" startline="13">custom_preamble</references>
        <references refid="_a_f_s_k_8h_1a17468d10f0c67a4ee7b38aab09d9e096" compoundref="_a_f_s_k_8h" startline="47">BITRATE</references>
        <references refid="_a_f_s_k_8h_1a6227c8e3094856f801c020b9b6e02035" compoundref="_a_f_s_k_8h" startline="114">AFSK_DAC_IRQ_START</references>
        <references refid="struct_afsk_1aa3297e8885c70332e9274679b9329937" compoundref="_a_f_s_k_8h" startline="74">Afsk::tailLength</references>
        <references refid="_a_f_s_k_8cpp_1a258d100e9191b0a720dee2230b376abe" compoundref="_lib_a_p_r_s_8cpp" startline="14">custom_tail</references>
        <referencedby refid="_lib_a_p_r_s_8h_1a4112ffe044a152d02f86f8f25a30d45a" compoundref="_lib_a_p_r_s_8cpp" startline="54" endline="60">APRS_init</referencedby>
      </memberdef>
      <memberdef kind="function" id="_a_f_s_k_8cpp_1aa840b2686d9d10fd39098a35f56cf641" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void AFSK_txStart</definition>
        <argsstring>(Afsk *afsk)</argsstring>
        <name>AFSK_txStart</name>
        <param>
          <type><ref refid="struct_afsk" kindref="compound">Afsk</ref> *</type>
          <declname>afsk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Weather_Balloon/library/LibAPRS/AFSK.cpp" line="80" column="1" bodyfile="Weather_Balloon/library/LibAPRS/AFSK.cpp" bodystart="80" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="_a_f_s_k_8cpp_1adb7d23f979900b693df4f80b24e3eca1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AFSK_transmit</definition>
        <argsstring>(char *buffer, size_t size)</argsstring>
        <name>AFSK_transmit</name>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Weather_Balloon/library/LibAPRS/AFSK.cpp" line="109" column="1" bodyfile="Weather_Balloon/library/LibAPRS/AFSK.cpp" bodystart="109" bodyend="115"/>
        <references refid="_f_i_f_o_8h_1a8751dcbd047df6062c655c205b81e825" compoundref="_f_i_f_o_8h" startline="42" endline="44">fifo_flush</references>
        <references refid="struct_afsk_1a987e70d174e5cd82f73563d920273cc4" compoundref="_a_f_s_k_8h" startline="87">Afsk::txFifo</references>
        <references refid="_r_t_clib_8cpp_1acb559820d9ca11295b4500f179ef6392" compoundref="_r_t_clib_8cpp" startline="18">i</references>
        <references refid="_a_f_s_k_8cpp_1a68893c6a77f5945c30a7528e9841e5f3" compoundref="_a_f_s_k_8cpp" startline="95" endline="99">afsk_putchar</references>
      </memberdef>
      <memberdef kind="function" id="_a_f_s_k_8cpp_1aafcba3655264de89dda891b98d661b59" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint8_t</type>
        <definition>uint8_t AFSK_dac_isr</definition>
        <argsstring>(Afsk *afsk)</argsstring>
        <name>AFSK_dac_isr</name>
        <param>
          <type><ref refid="struct_afsk" kindref="compound">Afsk</ref> *</type>
          <declname>afsk</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Weather_Balloon/library/LibAPRS/AFSK.cpp" line="117" column="1" bodyfile="Weather_Balloon/library/LibAPRS/AFSK.cpp" bodystart="117" bodyend="176"/>
        <references refid="struct_afsk_1a6a63466f08a5391a6515479363283fdf" compoundref="_a_f_s_k_8h" startline="77">Afsk::sampleIndex</references>
        <references refid="struct_afsk_1a763bb48860d3ba79de2dd1abffa2ad89" compoundref="_a_f_s_k_8h" startline="79">Afsk::txBit</references>
        <references refid="_f_i_f_o_8h_1a74dc98c02cf744306222be8de0b4665e" compoundref="_f_i_f_o_8h" startline="15" endline="17">fifo_isempty</references>
        <references refid="struct_afsk_1a987e70d174e5cd82f73563d920273cc4" compoundref="_a_f_s_k_8h" startline="87">Afsk::txFifo</references>
        <references refid="struct_afsk_1aa3297e8885c70332e9274679b9329937" compoundref="_a_f_s_k_8h" startline="74">Afsk::tailLength</references>
        <references refid="_a_f_s_k_8h_1a3f7526a581e906e739332ccace845e2b" compoundref="_a_f_s_k_8h" startline="115">AFSK_DAC_IRQ_STOP</references>
        <references refid="struct_afsk_1aea4204b922aaf2c78708bacec08d7888" compoundref="_a_f_s_k_8h" startline="90">Afsk::sending</references>
        <references refid="_a_f_s_k_8h_1acda9d4f9b15d326fb4d56c788cb057a0" compoundref="_a_f_s_k_8h" startline="125">LED_TX_OFF</references>
        <references refid="struct_afsk_1aece27671c62a8c93ce32e4bd6c38f312" compoundref="_a_f_s_k_8h" startline="80">Afsk::bitStuff</references>
        <references refid="struct_afsk_1ab6ea81ad33d9cf98080a6e567cfd7887" compoundref="_a_f_s_k_8h" startline="82">Afsk::bitstuffCount</references>
        <references refid="struct_afsk_1a586542863e66d99dbb7b655fa54af563" compoundref="_a_f_s_k_8h" startline="73">Afsk::preambleLength</references>
        <references refid="struct_afsk_1abcc27bcdd8198ea3e46df974f7a17664" compoundref="_a_f_s_k_8h" startline="78">Afsk::currentOutputByte</references>
        <references refid="_h_d_l_c_8h_1a7dfaac00ac4dc67fd47f2cbdf51d5c72" compoundref="_h_d_l_c_8h" startline="4">HDLC_FLAG</references>
        <references refid="_f_i_f_o_8h_1a540ee60aeab738e6e05dd148f5def1a3" compoundref="_f_i_f_o_8h" startline="33" endline="40">fifo_pop</references>
        <references refid="_h_d_l_c_8h_1ae1d8d5447af97b18578d75c6d69ac46a" compoundref="_h_d_l_c_8h" startline="6">AX25_ESC</references>
        <references refid="_h_d_l_c_8h_1a69a2c8271c865acf4cfa1c1d8ee9443e" compoundref="_h_d_l_c_8h" startline="5">HDLC_RESET</references>
        <references refid="_a_f_s_k_8h_1ad6e02c036335fa22b14831f729080bc3" compoundref="_a_f_s_k_8h" startline="49">BIT_STUFF_LEN</references>
        <references refid="struct_afsk_1ae5f800f21b5aa819af756c5572e63cce" compoundref="_a_f_s_k_8h" startline="85">Afsk::phaseInc</references>
        <references refid="_a_f_s_k_8h_1a95fea365da4cc2eabb52f1fa7d77fc6d" compoundref="_a_f_s_k_8h" startline="33">SWITCH_TONE</references>
        <references refid="_a_f_s_k_8h_1a15440d8d1e6efc47a3263ccf91a8cb74" compoundref="_a_f_s_k_8h" startline="48">SAMPLESPERBIT</references>
        <references refid="struct_afsk_1aa62658bb66ca18cf3d268258ef126283" compoundref="_a_f_s_k_8h" startline="84">Afsk::phaseAcc</references>
        <references refid="_a_f_s_k_8h_1aa905e754cc59c8a38f5c75127514e77a" compoundref="_a_f_s_k_8h" startline="12">SIN_LEN</references>
        <references refid="struct_hdlc_1a1be563f695b6ea1097624b75e81b89b8" compoundref="_a_f_s_k_8h" startline="60">Hdlc::demodulatedBits</references>
        <references refid="_f_i_f_o_8h_1ab4d69b9b4cf6ace05b4a3c2fddb0b7fe" compoundref="_f_i_f_o_8h" startline="19" endline="21">fifo_isfull</references>
        <references refid="_f_i_f_o_8h_1af58b59a5f3814ca6c0415a66797ab9f7" compoundref="_f_i_f_o_8h" startline="23" endline="31">fifo_push</references>
        <references refid="struct_hdlc_1ad7bc494d6beca6c71123a96cee2baeb7" compoundref="_a_f_s_k_8h" startline="63">Hdlc::receiving</references>
        <references refid="_a_f_s_k_8cpp_1a2218d613dcf94d2a7c6385575ffb7955" compoundref="_lib_a_p_r_s_8cpp" startline="11">LibAPRS_open_squelch</references>
        <references refid="_a_f_s_k_8h_1a8581cc8306ae1bd1d32e66a01889a0de" compoundref="_a_f_s_k_8h" startline="128">LED_RX_ON</references>
        <references refid="_a_f_s_k_8h_1a9b644abb06b553d4ef45da36e8ff636b" compoundref="_a_f_s_k_8h" startline="129">LED_RX_OFF</references>
        <references refid="struct_hdlc_1a3cff2def6c18174cabe180aab91ac32f" compoundref="_a_f_s_k_8h" startline="62">Hdlc::currentByte</references>
        <references refid="struct_hdlc_1ac2a3d40847828c994ae837f34d22bba7" compoundref="_a_f_s_k_8h" startline="61">Hdlc::bitIndex</references>
        <referencedby refid="_a_f_s_k_8cpp_1a05c2e5b588ced1cd7312f5b0edc5b295" compoundref="_a_f_s_k_8cpp" startline="461" endline="475">ISR</referencedby>
      </memberdef>
      <memberdef kind="function" id="_a_f_s_k_8cpp_1ac3553d1cf5f5f690ca26d97d709cdac4" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>static bool hdlcParse</definition>
        <argsstring>(Hdlc *hdlc, bool bit, FIFOBuffer *fifo)</argsstring>
        <name>hdlcParse</name>
        <param>
          <type><ref refid="struct_hdlc" kindref="compound">Hdlc</ref> *</type>
          <declname>hdlc</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>bit</declname>
        </param>
        <param>
          <type><ref refid="struct_f_i_f_o_buffer" kindref="compound">FIFOBuffer</ref> *</type>
          <declname>fifo</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Weather_Balloon/library/LibAPRS/AFSK.cpp" line="178" column="1" bodyfile="Weather_Balloon/library/LibAPRS/AFSK.cpp" bodystart="178" bodyend="321"/>
      </memberdef>
      <memberdef kind="function" id="_a_f_s_k_8cpp_1a4a34a69b6beff75a5aeca8df45cefad0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void AFSK_adc_isr</definition>
        <argsstring>(Afsk *afsk, int8_t currentSample)</argsstring>
        <name>AFSK_adc_isr</name>
        <param>
          <type><ref refid="struct_afsk" kindref="compound">Afsk</ref> *</type>
          <declname>afsk</declname>
        </param>
        <param>
          <type>int8_t</type>
          <declname>currentSample</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Weather_Balloon/library/LibAPRS/AFSK.cpp" line="324" column="1" bodyfile="Weather_Balloon/library/LibAPRS/AFSK.cpp" bodystart="324" bodyend="457"/>
        <references refid="struct_afsk_1a02560c20963adab17b0706c8c69f2ed3" compoundref="_a_f_s_k_8h" startline="99">Afsk::iirX</references>
        <references refid="_f_i_f_o_8h_1a540ee60aeab738e6e05dd148f5def1a3" compoundref="_f_i_f_o_8h" startline="33" endline="40">fifo_pop</references>
        <references refid="struct_afsk_1a326b5be68b2c9bb6191ac8d76a021999" compoundref="_a_f_s_k_8h" startline="93">Afsk::delayFifo</references>
        <references refid="struct_afsk_1a454754399c47bf3514ffc495832b5391" compoundref="_a_f_s_k_8h" startline="100">Afsk::iirY</references>
        <references refid="struct_afsk_1af07324b473ed86d0f79b539d0e76ed8c" compoundref="_a_f_s_k_8h" startline="102">Afsk::sampledBits</references>
        <references refid="_f_i_f_o_8h_1af58b59a5f3814ca6c0415a66797ab9f7" compoundref="_f_i_f_o_8h" startline="23" endline="31">fifo_push</references>
        <references refid="_a_f_s_k_8h_1afbfdee165f3dbab3c1026c3631edfe09" compoundref="_a_f_s_k_8h" startline="36">SIGNAL_TRANSITIONED</references>
        <references refid="struct_afsk_1a109e9e878c62839db0f611c8c636ba93" compoundref="_a_f_s_k_8h" startline="103">Afsk::currentPhase</references>
        <references refid="_a_f_s_k_8h_1aac65fdad64d3a017b61e5b5625f91adc" compoundref="_a_f_s_k_8h" startline="55">PHASE_THRESHOLD</references>
        <references refid="_a_f_s_k_8h_1a63e72faebeb8869f9768ff642ae90b2d" compoundref="_a_f_s_k_8h" startline="53">PHASE_INC</references>
        <references refid="_a_f_s_k_8h_1ab44db8f63c4b1549a83fb1abadec53e0" compoundref="_a_f_s_k_8h" startline="52">PHASE_BITS</references>
        <references refid="_a_f_s_k_8h_1addd9c4d64b2f30c854d55685c2f561a8" compoundref="_a_f_s_k_8h" startline="54">PHASE_MAX</references>
        <references refid="struct_afsk_1a6f734e90f74a1efd094c9cde6ea9df6d" compoundref="_a_f_s_k_8h" startline="104">Afsk::actualBits</references>
        <references refid="struct_afsk_1a0f2cf84d5882a74b33b54828e4adda6d" compoundref="_a_f_s_k_8h" startline="72">Afsk::hdlc</references>
        <references refid="_a_f_s_k_8h_1a7c3741917df64da94dbc81b86ccb28fb" compoundref="_a_f_s_k_8h" startline="37">TRANSITION_FOUND</references>
        <references refid="struct_afsk_1ac37f5dab53ed2219bbfc0d4c3f2f25b8" compoundref="_a_f_s_k_8h" startline="96">Afsk::rxFifo</references>
        <references refid="struct_afsk_1a4b90678865e08c02384199c6b10aa5b5" compoundref="_a_f_s_k_8h" startline="106">Afsk::status</references>
        <references refid="_f_i_f_o_8h_1ab4d69b9b4cf6ace05b4a3c2fddb0b7fe" compoundref="_f_i_f_o_8h" startline="19" endline="21">fifo_isfull</references>
        <references refid="_f_i_f_o_8h_1a8751dcbd047df6062c655c205b81e825" compoundref="_f_i_f_o_8h" startline="42" endline="44">fifo_flush</references>
        <references refid="_a_f_s_k_8cpp_1ad32c139b02cf1bb92da6d73ecf334785" compoundref="_lib_a_p_r_s_8cpp" startline="62" endline="64">APRS_poll</references>
        <referencedby refid="_a_f_s_k_8cpp_1a05c2e5b588ced1cd7312f5b0edc5b295" compoundref="_a_f_s_k_8cpp" startline="461" endline="475">ISR</referencedby>
      </memberdef>
      <memberdef kind="function" id="_a_f_s_k_8cpp_1ad32c139b02cf1bb92da6d73ecf334785" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void APRS_poll</definition>
        <argsstring>()</argsstring>
        <name>APRS_poll</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Weather_Balloon/library/LibAPRS/AFSK.cpp" line="459" column="1" bodyfile="Weather_Balloon/library/LibAPRS/LibAPRS.cpp" bodystart="62" bodyend="64"/>
        <referencedby refid="_a_f_s_k_8cpp_1a4a34a69b6beff75a5aeca8df45cefad0" compoundref="_a_f_s_k_8cpp" startline="324" endline="457">AFSK_adc_isr</referencedby>
        <referencedby refid="_a_f_s_k_8cpp_1a05c2e5b588ced1cd7312f5b0edc5b295" compoundref="_a_f_s_k_8cpp" startline="461" endline="475">ISR</referencedby>
      </memberdef>
      <memberdef kind="function" id="_a_f_s_k_8cpp_1a05c2e5b588ced1cd7312f5b0edc5b295" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>ISR</definition>
        <argsstring>(ADC_vect)</argsstring>
        <name>ISR</name>
        <param>
          <type>ADC_vect</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="Weather_Balloon/library/LibAPRS/AFSK.cpp" line="461" column="1" bodyfile="Weather_Balloon/library/LibAPRS/AFSK.cpp" bodystart="461" bodyend="475"/>
        <references refid="_a_f_s_k_8cpp_1a4a34a69b6beff75a5aeca8df45cefad0" compoundref="_a_f_s_k_8cpp" startline="324" endline="457">AFSK_adc_isr</references>
        <references refid="_a_f_s_k_8cpp_1a2ef8aff82c650b3ae4024239ae8f912b" compoundref="_a_f_s_k_8cpp" startline="10">hw_afsk_dac_isr</references>
        <references refid="device_8h_1afbdc123b0b82a37ee0e8272c6e39e66c" compoundref="device_8h" startline="24">DAC_PORT</references>
        <references refid="_a_f_s_k_8cpp_1aafcba3655264de89dda891b98d661b59" compoundref="_a_f_s_k_8cpp" startline="117" endline="176">AFSK_dac_isr</references>
        <references refid="_a_f_s_k_8cpp_1a849ed7993cbf4eeb7976810c3b5f526c" compoundref="_a_f_s_k_8cpp" startline="460">poll_timer</references>
        <references refid="_a_f_s_k_8cpp_1ad32c139b02cf1bb92da6d73ecf334785" compoundref="_lib_a_p_r_s_8cpp" startline="62" endline="64">APRS_poll</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="_a_f_s_k_8h" kindref="compound">AFSK.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;Arduino.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="_a_f_s_k_8cpp_1aca36a8e2b3f8db1978f37152c411201c" kindref="member">custom_preamble</ref>;</highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/><ref refid="_a_f_s_k_8cpp_1a258d100e9191b0a720dee2230b376abe" kindref="member">custom_tail</ref>;</highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_a_f_s_k_8cpp_1a2986d8cf0562c17f61a0e69f0548b54d" kindref="member">LibAPRS_vref</ref>;</highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_a_f_s_k_8cpp_1a2218d613dcf94d2a7c6385575ffb7955" kindref="member">LibAPRS_open_squelch</ref>;</highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10" refid="_a_f_s_k_8cpp_1a2ef8aff82c650b3ae4024239ae8f912b" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_a_f_s_k_8cpp_1a2ef8aff82c650b3ae4024239ae8f912b" kindref="member">hw_afsk_dac_isr</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="11" refid="_a_f_s_k_8cpp_1aac7b2c86b4c563916a405e1d9322de7a" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="_a_f_s_k_8cpp_1aac7b2c86b4c563916a405e1d9322de7a" kindref="member">hw_5v_ref</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="12" refid="_a_f_s_k_8cpp_1aaae334b59062ff32a1371ab9a9925efc" refkind="member"><highlight class="normal"><ref refid="struct_afsk" kindref="compound">Afsk</ref><sp/>*<ref refid="_a_f_s_k_8cpp_1aaae334b59062ff32a1371ab9a9925efc" kindref="member">AFSK_modem</ref>;</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Forward<sp/>declerations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_a_f_s_k_8cpp_1a52e815cce13ae490f2fed9988b75c16c" kindref="member">afsk_getchar</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_a_f_s_k_8cpp_1a68893c6a77f5945c30a7528e9841e5f3" kindref="member">afsk_putchar</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c);</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19" refid="_a_f_s_k_8cpp_1aa88a0244c6e90a933c8292d9ea347d42" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_a_f_s_k_8cpp_1aa88a0244c6e90a933c8292d9ea347d42" kindref="member">AFSK_hw_refDetect</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>manual<sp/>for<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_a_f_s_k_8cpp_1a2986d8cf0562c17f61a0e69f0548b54d" kindref="member">LibAPRS_vref</ref><sp/>==<sp/>REF_5V)<sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_a_f_s_k_8cpp_1aac7b2c86b4c563916a405e1d9322de7a" kindref="member">hw_5v_ref</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_a_f_s_k_8cpp_1aac7b2c86b4c563916a405e1d9322de7a" kindref="member">hw_5v_ref</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="25"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="26"><highlight class="normal">}</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28" refid="_a_f_s_k_8cpp_1a3ec4dcd4db71db9100c3f30c594b1ab0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_a_f_s_k_8cpp_1a3ec4dcd4db71db9100c3f30c594b1ab0" kindref="member">AFSK_hw_init</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>up<sp/>ADC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_f_s_k_8cpp_1aa88a0244c6e90a933c8292d9ea347d42" kindref="member">AFSK_hw_refDetect</ref>();</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>TCCR1A<sp/>=<sp/>0;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>TCCR1B<sp/>=<sp/>_BV(CS10)<sp/>|<sp/>_BV(WGM13)<sp/>|<sp/>_BV(WGM12);</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>ICR1<sp/>=<sp/>(((<ref refid="_a_f_s_k_8h_1ab6b652797b16c31087c6e7fef45cc175" kindref="member">CPU_FREQ</ref>+<ref refid="device_8h_1ae0c5f12cd1a193d30e4e05bbe86ce45e" kindref="member">FREQUENCY_CORRECTION</ref>))<sp/>/<sp/>9600)<sp/>-<sp/>1;</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_a_f_s_k_8cpp_1aac7b2c86b4c563916a405e1d9322de7a" kindref="member">hw_5v_ref</ref>)<sp/>{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ADMUX<sp/>=<sp/>_BV(REFS0)<sp/>|<sp/>0;</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ADMUX<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="device_8h_1a6f53fbd627478c7f56cdb17b5aa3ff44" kindref="member">ADC_DDR</ref><sp/><sp/>&amp;=<sp/>~_BV(0);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="device_8h_1a1c6ce969ab3d12ac37f62c399a1e02c1" kindref="member">ADC_PORT</ref><sp/>&amp;=<sp/>~_BV(0);</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>DIDR0<sp/>|=<sp/>_BV(0);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>ADCSRB<sp/>=<sp/><sp/><sp/><sp/>_BV(ADTS2)<sp/>|</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_BV(ADTS1)<sp/>|</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_BV(ADTS0);<sp/><sp/></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>ADCSRA<sp/>=<sp/><sp/><sp/><sp/>_BV(ADEN)<sp/>|</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_BV(ADSC)<sp/>|</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_BV(ADATE)|</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_BV(ADIE)<sp/>|</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_BV(ADPS2);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_f_s_k_8h_1aac8110aa28bbf5739a39e186ad3ebc86" kindref="member">AFSK_DAC_INIT</ref>();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_f_s_k_8h_1a49a66c2203851e33ecbdb2e678f9663a" kindref="member">LED_TX_INIT</ref>();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_f_s_k_8h_1aa2ae7f3b8cfd16929ff5ce9f19601c72" kindref="member">LED_RX_INIT</ref>();</highlight></codeline>
<codeline lineno="58"><highlight class="normal">}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60" refid="_a_f_s_k_8h_1a8d929ae28fa1de2980b46e953fcf0980" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_a_f_s_k_8cpp_1a8d929ae28fa1de2980b46e953fcf0980" kindref="member">AFSK_init</ref>(<ref refid="struct_afsk" kindref="compound">Afsk</ref><sp/>*afsk)<sp/>{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Allocate<sp/>modem<sp/>struct<sp/>memory</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>memset(afsk,<sp/>0,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(*afsk));</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>AFSK_modem<sp/>=<sp/>afsk;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>phase<sp/>increment</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>afsk-&gt;<ref refid="struct_afsk_1ae5f800f21b5aa819af756c5572e63cce" kindref="member">phaseInc</ref><sp/>=<sp/><ref refid="_a_f_s_k_8h_1a3c7a6dbceee6762f12aa23e4930592e1" kindref="member">MARK_INC</ref>;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialise<sp/>FIFO<sp/>buffers</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_f_i_f_o_8h_1ae09eab69a9cb5c4d330aa248db01b5af" kindref="member">fifo_init</ref>(&amp;afsk-&gt;<ref refid="struct_afsk_1a326b5be68b2c9bb6191ac8d76a021999" kindref="member">delayFifo</ref>,<sp/>(uint8_t<sp/>*)afsk-&gt;<ref refid="struct_afsk_1aab24e087341259c5e3f9008a8557644e" kindref="member">delayBuf</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(afsk-&gt;<ref refid="struct_afsk_1aab24e087341259c5e3f9008a8557644e" kindref="member">delayBuf</ref>));</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_f_i_f_o_8h_1ae09eab69a9cb5c4d330aa248db01b5af" kindref="member">fifo_init</ref>(&amp;afsk-&gt;<ref refid="struct_afsk_1ac37f5dab53ed2219bbfc0d4c3f2f25b8" kindref="member">rxFifo</ref>,<sp/>afsk-&gt;<ref refid="struct_afsk_1a8c7ee9d7b92796ccc7c3257b581695cb" kindref="member">rxBuf</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(afsk-&gt;<ref refid="struct_afsk_1a8c7ee9d7b92796ccc7c3257b581695cb" kindref="member">rxBuf</ref>));</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_f_i_f_o_8h_1ae09eab69a9cb5c4d330aa248db01b5af" kindref="member">fifo_init</ref>(&amp;afsk-&gt;<ref refid="struct_afsk_1a987e70d174e5cd82f73563d920273cc4" kindref="member">txFifo</ref>,<sp/>afsk-&gt;<ref refid="struct_afsk_1a32162873b8784efe43d3f28289c6ea6e" kindref="member">txBuf</ref>,<sp/></highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(afsk-&gt;<ref refid="struct_afsk_1a32162873b8784efe43d3f28289c6ea6e" kindref="member">txBuf</ref>));</highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Fill<sp/>delay<sp/>FIFO<sp/>with<sp/>zeroes</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_r_t_clib_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref><sp/>=<sp/>0;<sp/><ref refid="_r_t_clib_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref>&lt;<ref refid="_a_f_s_k_8h_1a15440d8d1e6efc47a3263ccf91a8cb74" kindref="member">SAMPLESPERBIT</ref><sp/>/<sp/>2;<sp/><ref refid="_r_t_clib_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref>++)<sp/>{</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_f_i_f_o_8h_1af58b59a5f3814ca6c0415a66797ab9f7" kindref="member">fifo_push</ref>(&amp;afsk-&gt;<ref refid="struct_afsk_1a326b5be68b2c9bb6191ac8d76a021999" kindref="member">delayFifo</ref>,<sp/>0);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_f_s_k_8cpp_1a3ec4dcd4db71db9100c3f30c594b1ab0" kindref="member">AFSK_hw_init</ref>();</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal">}</highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>AFSK_txStart(<ref refid="struct_afsk" kindref="compound">Afsk</ref><sp/>*afsk)<sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!afsk-&gt;<ref refid="struct_afsk_1aea4204b922aaf2c78708bacec08d7888" kindref="member">sending</ref>)<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>afsk-&gt;<ref refid="struct_afsk_1ae5f800f21b5aa819af756c5572e63cce" kindref="member">phaseInc</ref><sp/>=<sp/><ref refid="_a_f_s_k_8h_1a3c7a6dbceee6762f12aa23e4930592e1" kindref="member">MARK_INC</ref>;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>afsk-&gt;<ref refid="struct_afsk_1aa62658bb66ca18cf3d268258ef126283" kindref="member">phaseAcc</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>afsk-&gt;<ref refid="struct_afsk_1ab6ea81ad33d9cf98080a6e567cfd7887" kindref="member">bitstuffCount</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>afsk-&gt;<ref refid="struct_afsk_1aea4204b922aaf2c78708bacec08d7888" kindref="member">sending</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_a_f_s_k_8h_1aa492cbe1864040a6233dd82239534438" kindref="member">LED_TX_ON</ref>();</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>afsk-&gt;<ref refid="struct_afsk_1a586542863e66d99dbb7b655fa54af563" kindref="member">preambleLength</ref><sp/>=<sp/><ref refid="_a_f_s_k_8h_1a1ddec5826f8a1f9010183107bb77c06d" kindref="member">DIV_ROUND</ref>(<ref refid="_a_f_s_k_8cpp_1aca36a8e2b3f8db1978f37152c411201c" kindref="member">custom_preamble</ref><sp/>*<sp/><ref refid="_a_f_s_k_8h_1a17468d10f0c67a4ee7b38aab09d9e096" kindref="member">BITRATE</ref>,<sp/>8000);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_a_f_s_k_8h_1a6227c8e3094856f801c020b9b6e02035" kindref="member">AFSK_DAC_IRQ_START</ref>();</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>ATOMIC_BLOCK(ATOMIC_RESTORESTATE)<sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>afsk-&gt;<ref refid="struct_afsk_1aa3297e8885c70332e9274679b9329937" kindref="member">tailLength</ref><sp/>=<sp/><ref refid="_a_f_s_k_8h_1a1ddec5826f8a1f9010183107bb77c06d" kindref="member">DIV_ROUND</ref>(<ref refid="_a_f_s_k_8cpp_1a258d100e9191b0a720dee2230b376abe" kindref="member">custom_tail</ref><sp/>*<sp/><ref refid="_a_f_s_k_8h_1a17468d10f0c67a4ee7b38aab09d9e096" kindref="member">BITRATE</ref>,<sp/>8000);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal">}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="95" refid="_a_f_s_k_8h_1a68893c6a77f5945c30a7528e9841e5f3" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_a_f_s_k_8cpp_1a68893c6a77f5945c30a7528e9841e5f3" kindref="member">afsk_putchar</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>c)<sp/>{</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>AFSK_txStart(AFSK_modem);</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(<ref refid="_f_i_f_o_8h_1aa11a35c25acb9584a1d452227a70f63d" kindref="member">fifo_isfull_locked</ref>(&amp;AFSK_modem-&gt;<ref refid="struct_afsk_1a987e70d174e5cd82f73563d920273cc4" kindref="member">txFifo</ref>))<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>Wait<sp/>*/</highlight><highlight class="normal"><sp/>}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_f_i_f_o_8h_1af5fb2815bc19265354c00c25a4dc8994" kindref="member">fifo_push_locked</ref>(&amp;AFSK_modem-&gt;<ref refid="struct_afsk_1a987e70d174e5cd82f73563d920273cc4" kindref="member">txFifo</ref>,<sp/>c);</highlight></codeline>
<codeline lineno="99"><highlight class="normal">}</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101" refid="_a_f_s_k_8h_1a52e815cce13ae490f2fed9988b75c16c" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_a_f_s_k_8cpp_1a52e815cce13ae490f2fed9988b75c16c" kindref="member">afsk_getchar</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_f_i_f_o_8h_1aaa89b948af7949dff7c34fd6142f9e0a" kindref="member">fifo_isempty_locked</ref>(&amp;AFSK_modem-&gt;<ref refid="struct_afsk_1ac37f5dab53ed2219bbfc0d4c3f2f25b8" kindref="member">rxFifo</ref>))<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>EOF;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="_f_i_f_o_8h_1a2f05edf7653b62251dd66c7ae7ad1bb7" kindref="member">fifo_pop_locked</ref>(&amp;AFSK_modem-&gt;<ref refid="struct_afsk_1ac37f5dab53ed2219bbfc0d4c3f2f25b8" kindref="member">rxFifo</ref>);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal">}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="_a_f_s_k_8h_1adb7d23f979900b693df4f80b24e3eca1" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_a_f_s_k_8cpp_1adb7d23f979900b693df4f80b24e3eca1" kindref="member">AFSK_transmit</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buffer,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>size)<sp/>{</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_f_i_f_o_8h_1a8751dcbd047df6062c655c205b81e825" kindref="member">fifo_flush</ref>(&amp;AFSK_modem-&gt;<ref refid="struct_afsk_1a987e70d174e5cd82f73563d920273cc4" kindref="member">txFifo</ref>);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="_r_t_clib_8cpp_1acb559820d9ca11295b4500f179ef6392" kindref="member">i</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(size--)<sp/>{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_a_f_s_k_8cpp_1a68893c6a77f5945c30a7528e9841e5f3" kindref="member">afsk_putchar</ref>(buffer[i++]);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="_a_f_s_k_8cpp_1aafcba3655264de89dda891b98d661b59" refkind="member"><highlight class="normal">uint8_t<sp/><ref refid="_a_f_s_k_8cpp_1aafcba3655264de89dda891b98d661b59" kindref="member">AFSK_dac_isr</ref>(<ref refid="struct_afsk" kindref="compound">Afsk</ref><sp/>*afsk)<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(afsk-&gt;<ref refid="struct_afsk_1a6a63466f08a5391a6515479363283fdf" kindref="member">sampleIndex</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(afsk-&gt;<ref refid="struct_afsk_1a763bb48860d3ba79de2dd1abffa2ad89" kindref="member">txBit</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_f_i_f_o_8h_1a74dc98c02cf744306222be8de0b4665e" kindref="member">fifo_isempty</ref>(&amp;afsk-&gt;<ref refid="struct_afsk_1a987e70d174e5cd82f73563d920273cc4" kindref="member">txFifo</ref>)<sp/>&amp;&amp;<sp/>afsk-&gt;<ref refid="struct_afsk_1aa3297e8885c70332e9274679b9329937" kindref="member">tailLength</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_a_f_s_k_8h_1a3f7526a581e906e739332ccace845e2b" kindref="member">AFSK_DAC_IRQ_STOP</ref>();</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>afsk-&gt;<ref refid="struct_afsk_1aea4204b922aaf2c78708bacec08d7888" kindref="member">sending</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_a_f_s_k_8h_1acda9d4f9b15d326fb4d56c788cb057a0" kindref="member">LED_TX_OFF</ref>();</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!afsk-&gt;<ref refid="struct_afsk_1aece27671c62a8c93ce32e4bd6c38f312" kindref="member">bitStuff</ref>)<sp/>afsk-&gt;<ref refid="struct_afsk_1ab6ea81ad33d9cf98080a6e567cfd7887" kindref="member">bitstuffCount</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>afsk-&gt;<ref refid="struct_afsk_1aece27671c62a8c93ce32e4bd6c38f312" kindref="member">bitStuff</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(afsk-&gt;<ref refid="struct_afsk_1a586542863e66d99dbb7b655fa54af563" kindref="member">preambleLength</ref><sp/>==<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_f_i_f_o_8h_1a74dc98c02cf744306222be8de0b4665e" kindref="member">fifo_isempty</ref>(&amp;afsk-&gt;<ref refid="struct_afsk_1a987e70d174e5cd82f73563d920273cc4" kindref="member">txFifo</ref>))<sp/>{</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>afsk-&gt;<ref refid="struct_afsk_1aa3297e8885c70332e9274679b9329937" kindref="member">tailLength</ref>--;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>afsk-&gt;<ref refid="struct_afsk_1abcc27bcdd8198ea3e46df974f7a17664" kindref="member">currentOutputByte</ref><sp/>=<sp/><ref refid="_h_d_l_c_8h_1a7dfaac00ac4dc67fd47f2cbdf51d5c72" kindref="member">HDLC_FLAG</ref>;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>afsk-&gt;<ref refid="struct_afsk_1abcc27bcdd8198ea3e46df974f7a17664" kindref="member">currentOutputByte</ref><sp/>=<sp/><ref refid="_f_i_f_o_8h_1a540ee60aeab738e6e05dd148f5def1a3" kindref="member">fifo_pop</ref>(&amp;afsk-&gt;<ref refid="struct_afsk_1a987e70d174e5cd82f73563d920273cc4" kindref="member">txFifo</ref>);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>afsk-&gt;<ref refid="struct_afsk_1a586542863e66d99dbb7b655fa54af563" kindref="member">preambleLength</ref>--;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>afsk-&gt;<ref refid="struct_afsk_1abcc27bcdd8198ea3e46df974f7a17664" kindref="member">currentOutputByte</ref><sp/>=<sp/><ref refid="_h_d_l_c_8h_1a7dfaac00ac4dc67fd47f2cbdf51d5c72" kindref="member">HDLC_FLAG</ref>;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(afsk-&gt;<ref refid="struct_afsk_1abcc27bcdd8198ea3e46df974f7a17664" kindref="member">currentOutputByte</ref><sp/>==<sp/><ref refid="_h_d_l_c_8h_1ae1d8d5447af97b18578d75c6d69ac46a" kindref="member">AX25_ESC</ref>)<sp/>{</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_f_i_f_o_8h_1a74dc98c02cf744306222be8de0b4665e" kindref="member">fifo_isempty</ref>(&amp;afsk-&gt;<ref refid="struct_afsk_1a987e70d174e5cd82f73563d920273cc4" kindref="member">txFifo</ref>))<sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_a_f_s_k_8h_1a3f7526a581e906e739332ccace845e2b" kindref="member">AFSK_DAC_IRQ_STOP</ref>();</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>afsk-&gt;<ref refid="struct_afsk_1aea4204b922aaf2c78708bacec08d7888" kindref="member">sending</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_a_f_s_k_8h_1acda9d4f9b15d326fb4d56c788cb057a0" kindref="member">LED_TX_OFF</ref>();</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>afsk-&gt;<ref refid="struct_afsk_1abcc27bcdd8198ea3e46df974f7a17664" kindref="member">currentOutputByte</ref><sp/>=<sp/><ref refid="_f_i_f_o_8h_1a540ee60aeab738e6e05dd148f5def1a3" kindref="member">fifo_pop</ref>(&amp;afsk-&gt;<ref refid="struct_afsk_1a987e70d174e5cd82f73563d920273cc4" kindref="member">txFifo</ref>);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(afsk-&gt;<ref refid="struct_afsk_1abcc27bcdd8198ea3e46df974f7a17664" kindref="member">currentOutputByte</ref><sp/>==<sp/><ref refid="_h_d_l_c_8h_1a7dfaac00ac4dc67fd47f2cbdf51d5c72" kindref="member">HDLC_FLAG</ref><sp/>||<sp/>afsk-&gt;<ref refid="struct_afsk_1abcc27bcdd8198ea3e46df974f7a17664" kindref="member">currentOutputByte</ref><sp/>==<sp/><ref refid="_h_d_l_c_8h_1a69a2c8271c865acf4cfa1c1d8ee9443e" kindref="member">HDLC_RESET</ref>)<sp/>{</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>afsk-&gt;<ref refid="struct_afsk_1aece27671c62a8c93ce32e4bd6c38f312" kindref="member">bitStuff</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>afsk-&gt;<ref refid="struct_afsk_1a763bb48860d3ba79de2dd1abffa2ad89" kindref="member">txBit</ref><sp/>=<sp/>0x01;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(afsk-&gt;<ref refid="struct_afsk_1aece27671c62a8c93ce32e4bd6c38f312" kindref="member">bitStuff</ref><sp/>&amp;&amp;<sp/>afsk-&gt;<ref refid="struct_afsk_1ab6ea81ad33d9cf98080a6e567cfd7887" kindref="member">bitstuffCount</ref><sp/>&gt;=<sp/><ref refid="_a_f_s_k_8h_1ad6e02c036335fa22b14831f729080bc3" kindref="member">BIT_STUFF_LEN</ref>)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>afsk-&gt;<ref refid="struct_afsk_1ab6ea81ad33d9cf98080a6e567cfd7887" kindref="member">bitstuffCount</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>afsk-&gt;<ref refid="struct_afsk_1ae5f800f21b5aa819af756c5572e63cce" kindref="member">phaseInc</ref><sp/>=<sp/><ref refid="_a_f_s_k_8h_1a95fea365da4cc2eabb52f1fa7d77fc6d" kindref="member">SWITCH_TONE</ref>(afsk-&gt;<ref refid="struct_afsk_1ae5f800f21b5aa819af756c5572e63cce" kindref="member">phaseInc</ref>);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(afsk-&gt;<ref refid="struct_afsk_1abcc27bcdd8198ea3e46df974f7a17664" kindref="member">currentOutputByte</ref><sp/>&amp;<sp/>afsk-&gt;<ref refid="struct_afsk_1a763bb48860d3ba79de2dd1abffa2ad89" kindref="member">txBit</ref>)<sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>afsk-&gt;<ref refid="struct_afsk_1ab6ea81ad33d9cf98080a6e567cfd7887" kindref="member">bitstuffCount</ref>++;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>afsk-&gt;<ref refid="struct_afsk_1ab6ea81ad33d9cf98080a6e567cfd7887" kindref="member">bitstuffCount</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>afsk-&gt;<ref refid="struct_afsk_1ae5f800f21b5aa819af756c5572e63cce" kindref="member">phaseInc</ref><sp/>=<sp/><ref refid="_a_f_s_k_8h_1a95fea365da4cc2eabb52f1fa7d77fc6d" kindref="member">SWITCH_TONE</ref>(afsk-&gt;<ref refid="struct_afsk_1ae5f800f21b5aa819af756c5572e63cce" kindref="member">phaseInc</ref>);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>afsk-&gt;<ref refid="struct_afsk_1a763bb48860d3ba79de2dd1abffa2ad89" kindref="member">txBit</ref><sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>afsk-&gt;<ref refid="struct_afsk_1a6a63466f08a5391a6515479363283fdf" kindref="member">sampleIndex</ref><sp/>=<sp/><ref refid="_a_f_s_k_8h_1a15440d8d1e6efc47a3263ccf91a8cb74" kindref="member">SAMPLESPERBIT</ref>;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>afsk-&gt;<ref refid="struct_afsk_1aa62658bb66ca18cf3d268258ef126283" kindref="member">phaseAcc</ref><sp/>+=<sp/>afsk-&gt;<ref refid="struct_afsk_1ae5f800f21b5aa819af756c5572e63cce" kindref="member">phaseInc</ref>;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>afsk-&gt;<ref refid="struct_afsk_1aa62658bb66ca18cf3d268258ef126283" kindref="member">phaseAcc</ref><sp/>%=<sp/><ref refid="_a_f_s_k_8h_1aa905e754cc59c8a38f5c75127514e77a" kindref="member">SIN_LEN</ref>;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>afsk-&gt;<ref refid="struct_afsk_1a6a63466f08a5391a6515479363283fdf" kindref="member">sampleIndex</ref>--;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sinSample(afsk-&gt;<ref refid="struct_afsk_1aa62658bb66ca18cf3d268258ef126283" kindref="member">phaseAcc</ref>);</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>hdlcParse(<ref refid="struct_hdlc" kindref="compound">Hdlc</ref><sp/>*hdlc,<sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>bit,<sp/><ref refid="struct_f_i_f_o_buffer" kindref="compound">FIFOBuffer</ref><sp/>*fifo)<sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialise<sp/>a<sp/>return<sp/>value.<sp/>We<sp/>start<sp/>with<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assumption<sp/>that<sp/>all<sp/>is<sp/>going<sp/>to<sp/>end<sp/>well<sp/>:)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>ret<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Bitshift<sp/>our<sp/>byte<sp/>of<sp/>demodulated<sp/>bits<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>left<sp/>by<sp/>one<sp/>bit,<sp/>to<sp/>make<sp/>room<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>next<sp/>incoming<sp/>bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>hdlc-&gt;<ref refid="struct_hdlc_1a1be563f695b6ea1097624b75e81b89b8" kindref="member">demodulatedBits</ref><sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>And<sp/>then<sp/>put<sp/>the<sp/>newest<sp/>bit<sp/>from<sp/>the<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>demodulator<sp/>into<sp/>the<sp/>byte.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>hdlc-&gt;<ref refid="struct_hdlc_1a1be563f695b6ea1097624b75e81b89b8" kindref="member">demodulatedBits</ref><sp/>|=<sp/>bit<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>we&apos;ll<sp/>look<sp/>at<sp/>the<sp/>last<sp/>8<sp/>received<sp/>bits,<sp/>and</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>we<sp/>have<sp/>received<sp/>a<sp/>HDLC<sp/>flag<sp/>(01111110)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hdlc-&gt;<ref refid="struct_hdlc_1a1be563f695b6ea1097624b75e81b89b8" kindref="member">demodulatedBits</ref><sp/>==<sp/><ref refid="_h_d_l_c_8h_1a7dfaac00ac4dc67fd47f2cbdf51d5c72" kindref="member">HDLC_FLAG</ref>)<sp/>{</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>have,<sp/>check<sp/>that<sp/>our<sp/>output<sp/>buffer<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>full.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="_f_i_f_o_8h_1ab4d69b9b4cf6ace05b4a3c2fddb0b7fe" kindref="member">fifo_isfull</ref>(fifo))<sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>it<sp/>isn&apos;t,<sp/>we&apos;ll<sp/>push<sp/>the<sp/>HDLC_FLAG<sp/>into</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>buffer<sp/>and<sp/>indicate<sp/>that<sp/>we<sp/>are<sp/>now</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>receiving<sp/>data.<sp/>For<sp/>bling<sp/>we<sp/>also<sp/>turn</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>on<sp/>the<sp/>RX<sp/>LED.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_f_i_f_o_8h_1af58b59a5f3814ca6c0415a66797ab9f7" kindref="member">fifo_push</ref>(fifo,<sp/><ref refid="_h_d_l_c_8h_1a7dfaac00ac4dc67fd47f2cbdf51d5c72" kindref="member">HDLC_FLAG</ref>);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hdlc-&gt;<ref refid="struct_hdlc_1ad7bc494d6beca6c71123a96cee2baeb7" kindref="member">receiving</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(!<ref refid="_a_f_s_k_8cpp_1a2218d613dcf94d2a7c6385575ffb7955" kindref="member">LibAPRS_open_squelch</ref>)<sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_a_f_s_k_8h_1a8581cc8306ae1bd1d32e66a01889a0de" kindref="member">LED_RX_ON</ref>();</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>the<sp/>buffer<sp/>is<sp/>full,<sp/>we<sp/>have<sp/>a<sp/>problem</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>abort<sp/>by<sp/>setting<sp/>the<sp/>return<sp/>value<sp/>to<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>false<sp/>and<sp/>stopping<sp/>the<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hdlc-&gt;<ref refid="struct_hdlc_1ad7bc494d6beca6c71123a96cee2baeb7" kindref="member">receiving</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_a_f_s_k_8h_1a9b644abb06b553d4ef45da36e8ff636b" kindref="member">LED_RX_OFF</ref>();</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Everytime<sp/>we<sp/>receive<sp/>a<sp/>HDLC_FLAG,<sp/>we<sp/>reset<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>storage<sp/>for<sp/>our<sp/>current<sp/>incoming<sp/>byte<sp/>and<sp/>bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>position<sp/>in<sp/>that<sp/>byte.<sp/>This<sp/>effectively</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>synchronises<sp/>our<sp/>parsing<sp/>to<sp/><sp/>the<sp/>start<sp/>and<sp/>end</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>the<sp/>received<sp/>bytes.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hdlc-&gt;<ref refid="struct_hdlc_1a3cff2def6c18174cabe180aab91ac32f" kindref="member">currentByte</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hdlc-&gt;<ref refid="struct_hdlc_1ac2a3d40847828c994ae837f34d22bba7" kindref="member">bitIndex</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>we<sp/>have<sp/>received<sp/>a<sp/>RESET<sp/>flag<sp/>(01111111)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>In<sp/>this<sp/>comparison<sp/>we<sp/>also<sp/>detect<sp/>when<sp/>no<sp/>transmission</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(or<sp/>silence)<sp/>is<sp/>taking<sp/>place,<sp/>and<sp/>the<sp/>demodulator</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>returns<sp/>an<sp/>endless<sp/>stream<sp/>of<sp/>zeroes.<sp/>Due<sp/>to<sp/>the<sp/>NRZ</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>coding,<sp/>the<sp/>actual<sp/>bits<sp/>send<sp/>to<sp/>this<sp/>function<sp/>will</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>be<sp/>an<sp/>endless<sp/>stream<sp/>of<sp/>ones,<sp/>which<sp/>this<sp/>AND<sp/>operation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>will<sp/>also<sp/>detect.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((hdlc-&gt;<ref refid="struct_hdlc_1a1be563f695b6ea1097624b75e81b89b8" kindref="member">demodulatedBits</ref><sp/>&amp;<sp/><ref refid="_h_d_l_c_8h_1a69a2c8271c865acf4cfa1c1d8ee9443e" kindref="member">HDLC_RESET</ref>)<sp/>==<sp/><ref refid="_h_d_l_c_8h_1a69a2c8271c865acf4cfa1c1d8ee9443e" kindref="member">HDLC_RESET</ref>)<sp/>{</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>have,<sp/>something<sp/>probably<sp/>went<sp/>wrong<sp/>at<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>transmitting<sp/>end,<sp/>and<sp/>we<sp/>abort<sp/>the<sp/>reception.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hdlc-&gt;<ref refid="struct_hdlc_1ad7bc494d6beca6c71123a96cee2baeb7" kindref="member">receiving</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_a_f_s_k_8h_1a9b644abb06b553d4ef45da36e8ff636b" kindref="member">LED_RX_OFF</ref>();</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>have<sp/>not<sp/>yet<sp/>seen<sp/>a<sp/>HDLC_FLAG<sp/>indicating<sp/>that</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>transmission<sp/>is<sp/>actually<sp/>taking<sp/>place,<sp/>don&apos;t<sp/>bother</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>with<sp/>anything.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!hdlc-&gt;<ref refid="struct_hdlc_1ad7bc494d6beca6c71123a96cee2baeb7" kindref="member">receiving</ref>)</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>check<sp/>if<sp/>what<sp/>we<sp/>are<sp/>seeing<sp/>is<sp/>a<sp/>stuffed<sp/>bit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>the<sp/>different<sp/>HDLC<sp/>control<sp/>characters<sp/>like</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>HDLC_FLAG,<sp/>HDLC_RESET<sp/>and<sp/>such<sp/>could<sp/>also<sp/>occur<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>normal<sp/>data<sp/>stream,<sp/>we<sp/>employ<sp/>a<sp/>method<sp/>known<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;bit<sp/>stuffing&quot;.<sp/>All<sp/>control<sp/>characters<sp/>have<sp/>more<sp/>than</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>5<sp/>ones<sp/>in<sp/>a<sp/>row,<sp/>so<sp/>if<sp/>the<sp/>transmitting<sp/>party<sp/>detects</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>sequence<sp/>in<sp/>the<sp/>_data_<sp/>to<sp/>be<sp/>transmitted,<sp/>it<sp/>inserts</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>zero<sp/>to<sp/>avoid<sp/>the<sp/>receiving<sp/>party<sp/>interpreting<sp/>it<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>control<sp/>character.<sp/>Therefore,<sp/>if<sp/>we<sp/>detect<sp/>such<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>&quot;stuffed<sp/>bit&quot;,<sp/>we<sp/>simply<sp/>ignore<sp/>it<sp/>and<sp/>wait<sp/>for<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>next<sp/>bit<sp/>to<sp/>come<sp/>in.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>do<sp/>the<sp/>detection<sp/>by<sp/>applying<sp/>an<sp/>AND<sp/>bit-mask<sp/>to<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>stream<sp/>of<sp/>demodulated<sp/>bits.<sp/>This<sp/>mask<sp/>is<sp/>00111111<sp/>(0x3f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>the<sp/>result<sp/>of<sp/>the<sp/>operation<sp/>is<sp/>00111110<sp/>(0x3e),<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>detected<sp/>a<sp/>stuffed<sp/>bit.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((hdlc-&gt;<ref refid="struct_hdlc_1a1be563f695b6ea1097624b75e81b89b8" kindref="member">demodulatedBits</ref><sp/>&amp;<sp/>0x3f)<sp/>==<sp/>0x3e)</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>have<sp/>an<sp/>actual<sp/>1<sp/>bit,<sp/>push<sp/>this<sp/>to<sp/>the<sp/>current<sp/>byte</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>it&apos;s<sp/>a<sp/>zero,<sp/>we<sp/>don&apos;t<sp/>need<sp/>to<sp/>do<sp/>anything,<sp/>since<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bit<sp/>is<sp/>initialized<sp/>to<sp/>zero<sp/>when<sp/>we<sp/>bitshifted<sp/>earlier.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(hdlc-&gt;<ref refid="struct_hdlc_1a1be563f695b6ea1097624b75e81b89b8" kindref="member">demodulatedBits</ref><sp/>&amp;<sp/>0x01)</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hdlc-&gt;<ref refid="struct_hdlc_1a3cff2def6c18174cabe180aab91ac32f" kindref="member">currentByte</ref><sp/>|=<sp/>0x80;</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Increment<sp/>the<sp/>bitIndex<sp/>and<sp/>check<sp/>if<sp/>we<sp/>have<sp/>a<sp/>complete<sp/>byte</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(++hdlc-&gt;<ref refid="struct_hdlc_1ac2a3d40847828c994ae837f34d22bba7" kindref="member">bitIndex</ref><sp/>&gt;=<sp/>8)<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>have<sp/>a<sp/>HDLC<sp/>control<sp/>character,<sp/>put<sp/>a<sp/>AX.25<sp/>escape</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>in<sp/>the<sp/>received<sp/>data.<sp/>We<sp/>know<sp/>we<sp/>need<sp/>to<sp/>do<sp/>this,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>because<sp/>at<sp/>this<sp/>point<sp/>we<sp/>must<sp/>have<sp/>already<sp/>seen<sp/>a<sp/>HDLC</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>flag,<sp/>meaning<sp/>that<sp/>this<sp/>control<sp/>character<sp/>is<sp/>the<sp/>result</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>of<sp/>a<sp/>bitstuffed<sp/>byte<sp/>that<sp/>is<sp/>equal<sp/>to<sp/>said<sp/>control</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>character,<sp/>but<sp/>is<sp/>actually<sp/>part<sp/>of<sp/>the<sp/>data<sp/>stream.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>By<sp/>inserting<sp/>the<sp/>escape<sp/>character,<sp/>we<sp/>tell<sp/>the<sp/>protocol</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>layer<sp/>that<sp/>this<sp/>is<sp/>not<sp/>an<sp/>actual<sp/>control<sp/>character,<sp/>but</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>data.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((hdlc-&gt;<ref refid="struct_hdlc_1a3cff2def6c18174cabe180aab91ac32f" kindref="member">currentByte</ref><sp/>==<sp/><ref refid="_h_d_l_c_8h_1a7dfaac00ac4dc67fd47f2cbdf51d5c72" kindref="member">HDLC_FLAG</ref><sp/>||</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hdlc-&gt;<ref refid="struct_hdlc_1a3cff2def6c18174cabe180aab91ac32f" kindref="member">currentByte</ref><sp/>==<sp/><ref refid="_h_d_l_c_8h_1a69a2c8271c865acf4cfa1c1d8ee9443e" kindref="member">HDLC_RESET</ref><sp/>||</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hdlc-&gt;<ref refid="struct_hdlc_1a3cff2def6c18174cabe180aab91ac32f" kindref="member">currentByte</ref><sp/>==<sp/><ref refid="_h_d_l_c_8h_1ae1d8d5447af97b18578d75c6d69ac46a" kindref="member">AX25_ESC</ref>))<sp/>{</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>also<sp/>need<sp/>to<sp/>check<sp/>that<sp/>our<sp/>received<sp/>data<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>is<sp/>not<sp/>full<sp/>before<sp/>putting<sp/>more<sp/>data<sp/>in</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="_f_i_f_o_8h_1ab4d69b9b4cf6ace05b4a3c2fddb0b7fe" kindref="member">fifo_isfull</ref>(fifo))<sp/>{</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_f_i_f_o_8h_1af58b59a5f3814ca6c0415a66797ab9f7" kindref="member">fifo_push</ref>(fifo,<sp/><ref refid="_h_d_l_c_8h_1ae1d8d5447af97b18578d75c6d69ac46a" kindref="member">AX25_ESC</ref>);</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>it<sp/>is,<sp/>abort<sp/>and<sp/>return<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hdlc-&gt;<ref refid="struct_hdlc_1ad7bc494d6beca6c71123a96cee2baeb7" kindref="member">receiving</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_a_f_s_k_8h_1a9b644abb06b553d4ef45da36e8ff636b" kindref="member">LED_RX_OFF</ref>();</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Push<sp/>the<sp/>actual<sp/>byte<sp/>to<sp/>the<sp/>received<sp/>data<sp/>FIFO,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>it<sp/>isn&apos;t<sp/>full.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!<ref refid="_f_i_f_o_8h_1ab4d69b9b4cf6ace05b4a3c2fddb0b7fe" kindref="member">fifo_isfull</ref>(fifo))<sp/>{</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_f_i_f_o_8h_1af58b59a5f3814ca6c0415a66797ab9f7" kindref="member">fifo_push</ref>(fifo,<sp/>hdlc-&gt;<ref refid="struct_hdlc_1a3cff2def6c18174cabe180aab91ac32f" kindref="member">currentByte</ref>);</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>it<sp/>is,<sp/>well,<sp/>you<sp/>know<sp/>by<sp/>now!</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hdlc-&gt;<ref refid="struct_hdlc_1ad7bc494d6beca6c71123a96cee2baeb7" kindref="member">receiving</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_a_f_s_k_8h_1a9b644abb06b553d4ef45da36e8ff636b" kindref="member">LED_RX_OFF</ref>();</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Wipe<sp/>received<sp/>byte<sp/>and<sp/>reset<sp/>bit<sp/>index<sp/>to<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hdlc-&gt;<ref refid="struct_hdlc_1a3cff2def6c18174cabe180aab91ac32f" kindref="member">currentByte</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hdlc-&gt;<ref refid="struct_hdlc_1ac2a3d40847828c994ae837f34d22bba7" kindref="member">bitIndex</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>don&apos;t<sp/>have<sp/>a<sp/>full<sp/>byte<sp/>yet,<sp/>bitshift<sp/>the<sp/>byte</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>make<sp/>room<sp/>for<sp/>the<sp/>next<sp/>bit</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hdlc-&gt;<ref refid="struct_hdlc_1a3cff2def6c18174cabe180aab91ac32f" kindref="member">currentByte</ref><sp/>&gt;&gt;=<sp/>1;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//digitalWrite(13,<sp/>LOW);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="321"><highlight class="normal">}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="324" refid="_a_f_s_k_8cpp_1a4a34a69b6beff75a5aeca8df45cefad0" refkind="member"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_a_f_s_k_8cpp_1a4a34a69b6beff75a5aeca8df45cefad0" kindref="member">AFSK_adc_isr</ref>(<ref refid="struct_afsk" kindref="compound">Afsk</ref><sp/>*afsk,<sp/>int8_t<sp/>currentSample)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>To<sp/>determine<sp/>the<sp/>received<sp/>frequency,<sp/>and<sp/>thereby</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>bit<sp/>of<sp/>the<sp/>sample,<sp/>we<sp/>multiply<sp/>the<sp/>sample<sp/>by</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>sample<sp/>delayed<sp/>by<sp/>(samples<sp/>per<sp/>bit<sp/>/<sp/>2).</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>then<sp/>lowpass-filter<sp/>the<sp/>samples<sp/>with<sp/>a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Chebyshev<sp/>filter.<sp/>The<sp/>lowpass<sp/>filtering<sp/>serves</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>&quot;smooth<sp/>out&quot;<sp/>the<sp/>variations<sp/>in<sp/>the<sp/>samples.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>afsk-&gt;<ref refid="struct_afsk_1a02560c20963adab17b0706c8c69f2ed3" kindref="member">iirX</ref>[0]<sp/>=<sp/>afsk-&gt;<ref refid="struct_afsk_1a02560c20963adab17b0706c8c69f2ed3" kindref="member">iirX</ref>[1];</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>afsk-&gt;<ref refid="struct_afsk_1a02560c20963adab17b0706c8c69f2ed3" kindref="member">iirX</ref>[1]<sp/>=<sp/>((int8_t)<ref refid="_f_i_f_o_8h_1a540ee60aeab738e6e05dd148f5def1a3" kindref="member">fifo_pop</ref>(&amp;afsk-&gt;<ref refid="struct_afsk_1a326b5be68b2c9bb6191ac8d76a021999" kindref="member">delayFifo</ref>)<sp/>*<sp/>currentSample)<sp/>&gt;&gt;<sp/>2;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>afsk-&gt;<ref refid="struct_afsk_1a454754399c47bf3514ffc495832b5391" kindref="member">iirY</ref>[0]<sp/>=<sp/>afsk-&gt;<ref refid="struct_afsk_1a454754399c47bf3514ffc495832b5391" kindref="member">iirY</ref>[1];</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>afsk-&gt;<ref refid="struct_afsk_1a454754399c47bf3514ffc495832b5391" kindref="member">iirY</ref>[1]<sp/>=<sp/>afsk-&gt;<ref refid="struct_afsk_1a02560c20963adab17b0706c8c69f2ed3" kindref="member">iirX</ref>[0]<sp/>+<sp/>afsk-&gt;<ref refid="struct_afsk_1a02560c20963adab17b0706c8c69f2ed3" kindref="member">iirX</ref>[1]<sp/>+<sp/>(afsk-&gt;<ref refid="struct_afsk_1a454754399c47bf3514ffc495832b5391" kindref="member">iirY</ref>[0]<sp/>&gt;&gt;<sp/>1);<sp/></highlight><highlight class="comment">//<sp/>Chebyshev<sp/>filter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"></highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>put<sp/>the<sp/>sampled<sp/>bit<sp/>in<sp/>a<sp/>delay-line:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First<sp/>we<sp/>bitshift<sp/>everything<sp/>1<sp/>left</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>afsk-&gt;<ref refid="struct_afsk_1af07324b473ed86d0f79b539d0e76ed8c" kindref="member">sampledBits</ref><sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>And<sp/>then<sp/>add<sp/>the<sp/>sampled<sp/>bit<sp/>to<sp/>our<sp/>delay<sp/>line</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>afsk-&gt;<ref refid="struct_afsk_1af07324b473ed86d0f79b539d0e76ed8c" kindref="member">sampledBits</ref><sp/>|=<sp/>(afsk-&gt;<ref refid="struct_afsk_1a454754399c47bf3514ffc495832b5391" kindref="member">iirY</ref>[1]<sp/>&gt;<sp/>0)<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Put<sp/>the<sp/>current<sp/>raw<sp/>sample<sp/>in<sp/>the<sp/>delay<sp/>FIFO</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_f_i_f_o_8h_1af58b59a5f3814ca6c0415a66797ab9f7" kindref="member">fifo_push</ref>(&amp;afsk-&gt;<ref refid="struct_afsk_1a326b5be68b2c9bb6191ac8d76a021999" kindref="member">delayFifo</ref>,<sp/>currentSample);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>need<sp/>to<sp/>check<sp/>whether<sp/>there<sp/>is<sp/>a<sp/>signal<sp/>transition.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>there<sp/>is,<sp/>we<sp/>can<sp/>recalibrate<sp/>the<sp/>phase<sp/>of<sp/>our<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sampler<sp/>to<sp/>stay<sp/>in<sp/>sync<sp/>with<sp/>the<sp/>transmitter.<sp/>A<sp/>bit<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>explanation<sp/>is<sp/>required<sp/>to<sp/>understand<sp/>how<sp/>this<sp/>works.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Since<sp/>we<sp/>have<sp/>PHASE_MAX/PHASE_BITS<sp/>=<sp/>8<sp/>samples<sp/>per<sp/>bit,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>we<sp/>employ<sp/>a<sp/>phase<sp/>counter<sp/>(currentPhase),<sp/>that<sp/>increments</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>by<sp/>PHASE_BITS<sp/>everytime<sp/>a<sp/>sample<sp/>is<sp/>captured.<sp/>When<sp/>this</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>counter<sp/>reaches<sp/>PHASE_MAX,<sp/>it<sp/>wraps<sp/>around<sp/>by<sp/>modulus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>PHASE_MAX.<sp/>We<sp/>then<sp/>look<sp/>at<sp/>the<sp/>last<sp/>three<sp/>samples<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>captured<sp/>and<sp/>determine<sp/>if<sp/>the<sp/>bit<sp/>was<sp/>a<sp/>one<sp/>or<sp/>a<sp/>zero.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>gives<sp/>us<sp/>a<sp/>&quot;window&quot;<sp/>looking<sp/>into<sp/>the<sp/>stream<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>samples<sp/>coming<sp/>from<sp/>the<sp/>ADC.<sp/>Sort<sp/>of<sp/>like<sp/>this:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/>Past<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Future</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/>0000000011111111000000001111111100000000</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>|________|</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>||<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Window</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Every<sp/>time<sp/>we<sp/>detect<sp/>a<sp/>signal<sp/>transition,<sp/>we<sp/>adjust</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>where<sp/>this<sp/>window<sp/>is<sp/>positioned<sp/>little.<sp/>How<sp/>much<sp/>we</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>adjust<sp/>it<sp/>is<sp/>defined<sp/>by<sp/>PHASE_INC.<sp/>If<sp/>our<sp/>current<sp/>phase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>phase<sp/>counter<sp/>value<sp/>is<sp/>less<sp/>than<sp/>half<sp/>of<sp/>PHASE_MAX<sp/>(ie,<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>window<sp/>size)<sp/>when<sp/>a<sp/>signal<sp/>transition<sp/>is<sp/>detected,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>add<sp/>PHASE_INC<sp/>to<sp/>our<sp/>phase<sp/>counter,<sp/>effectively<sp/>moving</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>window<sp/>a<sp/>little<sp/>bit<sp/>backward<sp/>(to<sp/>the<sp/>left<sp/>in<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>illustration),<sp/>inversely,<sp/>if<sp/>the<sp/>phase<sp/>counter<sp/>is<sp/>greater</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>than<sp/>half<sp/>of<sp/>PHASE_MAX,<sp/>we<sp/>move<sp/>it<sp/>forward<sp/>a<sp/>little.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>way,<sp/>our<sp/>&quot;window&quot;<sp/>is<sp/>constantly<sp/>seeking<sp/>to<sp/>position</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>it&apos;s<sp/>center<sp/>at<sp/>the<sp/>bit<sp/>transitions.<sp/>Thus,<sp/>we<sp/>synchronise</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>our<sp/>timing<sp/>to<sp/>the<sp/>transmitter,<sp/>even<sp/>if<sp/>it&apos;s<sp/>timing<sp/>is</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>a<sp/>little<sp/>off<sp/>compared<sp/>to<sp/>our<sp/>own.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_a_f_s_k_8h_1afbfdee165f3dbab3c1026c3631edfe09" kindref="member">SIGNAL_TRANSITIONED</ref>(afsk-&gt;<ref refid="struct_afsk_1af07324b473ed86d0f79b539d0e76ed8c" kindref="member">sampledBits</ref>))<sp/>{</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(afsk-&gt;<ref refid="struct_afsk_1a109e9e878c62839db0f611c8c636ba93" kindref="member">currentPhase</ref><sp/>&lt;<sp/><ref refid="_a_f_s_k_8h_1aac65fdad64d3a017b61e5b5625f91adc" kindref="member">PHASE_THRESHOLD</ref>)<sp/>{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>afsk-&gt;<ref refid="struct_afsk_1a109e9e878c62839db0f611c8c636ba93" kindref="member">currentPhase</ref><sp/>+=<sp/><ref refid="_a_f_s_k_8h_1a63e72faebeb8869f9768ff642ae90b2d" kindref="member">PHASE_INC</ref>;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>afsk-&gt;<ref refid="struct_afsk_1a109e9e878c62839db0f611c8c636ba93" kindref="member">currentPhase</ref><sp/>-=<sp/><ref refid="_a_f_s_k_8h_1a63e72faebeb8869f9768ff642ae90b2d" kindref="member">PHASE_INC</ref>;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>increment<sp/>our<sp/>phase<sp/>counter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>afsk-&gt;<ref refid="struct_afsk_1a109e9e878c62839db0f611c8c636ba93" kindref="member">currentPhase</ref><sp/>+=<sp/><ref refid="_a_f_s_k_8h_1ab44db8f63c4b1549a83fb1abadec53e0" kindref="member">PHASE_BITS</ref>;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>we<sp/>have<sp/>reached<sp/>the<sp/>end<sp/>of</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>our<sp/>sampling<sp/>window.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(afsk-&gt;<ref refid="struct_afsk_1a109e9e878c62839db0f611c8c636ba93" kindref="member">currentPhase</ref><sp/>&gt;=<sp/><ref refid="_a_f_s_k_8h_1addd9c4d64b2f30c854d55685c2f561a8" kindref="member">PHASE_MAX</ref>)<sp/>{</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>we<sp/>have,<sp/>wrap<sp/>around<sp/>our<sp/>phase</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>counter<sp/>by<sp/>modulus</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>afsk-&gt;<ref refid="struct_afsk_1a109e9e878c62839db0f611c8c636ba93" kindref="member">currentPhase</ref><sp/>%=<sp/><ref refid="_a_f_s_k_8h_1addd9c4d64b2f30c854d55685c2f561a8" kindref="member">PHASE_MAX</ref>;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Bitshift<sp/>to<sp/>make<sp/>room<sp/>for<sp/>the<sp/>next</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bit<sp/>in<sp/>our<sp/>stream<sp/>of<sp/>demodulated<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>afsk-&gt;<ref refid="struct_afsk_1a6f734e90f74a1efd094c9cde6ea9df6d" kindref="member">actualBits</ref><sp/>&lt;&lt;=<sp/>1;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>determine<sp/>the<sp/>actual<sp/>bit<sp/>value<sp/>by<sp/>reading</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>last<sp/>3<sp/>sampled<sp/>bits.<sp/>If<sp/>there<sp/>is<sp/>three<sp/>or</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>more<sp/>1&apos;s,<sp/>we<sp/>will<sp/>assume<sp/>that<sp/>the<sp/>transmitter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sent<sp/>us<sp/>a<sp/>one,<sp/>otherwise<sp/>we<sp/>assume<sp/>a<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/>bits<sp/>=<sp/>afsk-&gt;<ref refid="struct_afsk_1af07324b473ed86d0f79b539d0e76ed8c" kindref="member">sampledBits</ref><sp/>&amp;<sp/>0x07;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(bits<sp/>==<sp/>0x07<sp/>||<sp/></highlight><highlight class="comment">//<sp/>111</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bits<sp/>==<sp/>0x06<sp/>||<sp/></highlight><highlight class="comment">//<sp/>110</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bits<sp/>==<sp/>0x05<sp/>||<sp/></highlight><highlight class="comment">//<sp/>101</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bits<sp/>==<sp/>0x03<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>011</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>afsk-&gt;<ref refid="struct_afsk_1a6f734e90f74a1efd094c9cde6ea9df6d" kindref="member">actualBits</ref><sp/>|=<sp/>1;</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>uint8_t<sp/>bits<sp/>=<sp/>afsk-&gt;sampledBits<sp/>&amp;<sp/>0x0f;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>uint8_t<sp/>c<sp/>=<sp/>0;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>c<sp/>+=<sp/>bits<sp/>&amp;<sp/>BV(1);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>c<sp/>+=<sp/>bits<sp/>&amp;<sp/>BV(2);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>c<sp/>+=<sp/>bits<sp/>&amp;<sp/>BV(3);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>c<sp/>+=<sp/>bits<sp/>&amp;<sp/>BV(4);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>c<sp/>+=<sp/>bits<sp/>&amp;<sp/>BV(5);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>(c<sp/>&gt;=<sp/>3)<sp/>afsk-&gt;actualBits<sp/>|=<sp/>1;</highlight></codeline>
<codeline lineno="427"><highlight class="comment"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Now<sp/>we<sp/>can<sp/>pass<sp/>the<sp/>actual<sp/>bit<sp/>to<sp/>the<sp/>HDLC<sp/>parser.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>are<sp/>using<sp/>NRZ<sp/>coding,<sp/>so<sp/>if<sp/>2<sp/>consecutive<sp/>bits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>have<sp/>the<sp/>same<sp/>value,<sp/>we<sp/>have<sp/>a<sp/>1,<sp/>otherwise<sp/>a<sp/>0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>use<sp/>the<sp/>TRANSITION_FOUND<sp/>function<sp/>to<sp/>determine<sp/>this.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>smart<sp/>in<sp/>combination<sp/>with<sp/>bit<sp/>stuffing,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>since<sp/>it<sp/>ensures<sp/>a<sp/>transmitter<sp/>will<sp/>never<sp/>send<sp/>more</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>than<sp/>five<sp/>consecutive<sp/>1&apos;s.<sp/>When<sp/>sending<sp/>consecutive</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>ones,<sp/>the<sp/>signal<sp/>stays<sp/>at<sp/>the<sp/>same<sp/>level,<sp/>and<sp/>if</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>happens<sp/>for<sp/>longer<sp/>periods<sp/>of<sp/>time,<sp/>we<sp/>would</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>not<sp/>be<sp/>able<sp/>to<sp/>synchronize<sp/>our<sp/>phase<sp/>to<sp/>the<sp/>transmitter</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>and<sp/>would<sp/>start<sp/>experiencing<sp/>&quot;bit<sp/>slip&quot;.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>By<sp/>combining<sp/>bit-stuffing<sp/>with<sp/>NRZ<sp/>coding,<sp/>we<sp/>ensure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>the<sp/>signal<sp/>will<sp/>regularly<sp/>make<sp/>transitions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>that<sp/>we<sp/>can<sp/>use<sp/>to<sp/>synchronize<sp/>our<sp/>phase.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>We<sp/>also<sp/>check<sp/>the<sp/>return<sp/>of<sp/>the<sp/>Link<sp/>Control<sp/>parser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>check<sp/>if<sp/>an<sp/>error<sp/>occured.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!hdlcParse(&amp;afsk-&gt;<ref refid="struct_afsk_1a0f2cf84d5882a74b33b54828e4adda6d" kindref="member">hdlc</ref>,<sp/>!<ref refid="_a_f_s_k_8h_1a7c3741917df64da94dbc81b86ccb28fb" kindref="member">TRANSITION_FOUND</ref>(afsk-&gt;<ref refid="struct_afsk_1a6f734e90f74a1efd094c9cde6ea9df6d" kindref="member">actualBits</ref>),<sp/>&amp;afsk-&gt;<ref refid="struct_afsk_1ac37f5dab53ed2219bbfc0d4c3f2f25b8" kindref="member">rxFifo</ref>))<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>afsk-&gt;<ref refid="struct_afsk_1a4b90678865e08c02384199c6b10aa5b5" kindref="member">status</ref><sp/>|=<sp/>1;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_f_i_f_o_8h_1ab4d69b9b4cf6ace05b4a3c2fddb0b7fe" kindref="member">fifo_isfull</ref>(&amp;afsk-&gt;<ref refid="struct_afsk_1ac37f5dab53ed2219bbfc0d4c3f2f25b8" kindref="member">rxFifo</ref>))<sp/>{</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_f_i_f_o_8h_1a8751dcbd047df6062c655c205b81e825" kindref="member">fifo_flush</ref>(&amp;afsk-&gt;<ref refid="struct_afsk_1ac37f5dab53ed2219bbfc0d4c3f2f25b8" kindref="member">rxFifo</ref>);</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>afsk-&gt;<ref refid="struct_afsk_1a4b90678865e08c02384199c6b10aa5b5" kindref="member">status</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal">}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="_a_f_s_k_8cpp_1ad32c139b02cf1bb92da6d73ecf334785" kindref="member">APRS_poll</ref>();</highlight></codeline>
<codeline lineno="460" refid="_a_f_s_k_8cpp_1a849ed7993cbf4eeb7976810c3b5f526c" refkind="member"><highlight class="normal">uint8_t<sp/><ref refid="_a_f_s_k_8cpp_1a849ed7993cbf4eeb7976810c3b5f526c" kindref="member">poll_timer</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="461" refid="_a_f_s_k_8cpp_1a05c2e5b588ced1cd7312f5b0edc5b295" refkind="member"><highlight class="normal"><ref refid="_a_f_s_k_8cpp_1a05c2e5b588ced1cd7312f5b0edc5b295" kindref="member">ISR</ref>(ADC_vect)<sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>TIFR1<sp/>=<sp/>_BV(ICF1);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_f_s_k_8cpp_1a4a34a69b6beff75a5aeca8df45cefad0" kindref="member">AFSK_adc_isr</ref>(AFSK_modem,<sp/>((int16_t)((ADC)<sp/>&gt;&gt;<sp/>2)<sp/>-<sp/>128));</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_a_f_s_k_8cpp_1a2ef8aff82c650b3ae4024239ae8f912b" kindref="member">hw_afsk_dac_isr</ref>)<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="device_8h_1afbdc123b0b82a37ee0e8272c6e39e66c" kindref="member">DAC_PORT</ref><sp/>=<sp/>(<ref refid="_a_f_s_k_8cpp_1aafcba3655264de89dda891b98d661b59" kindref="member">AFSK_dac_isr</ref>(AFSK_modem)<sp/>&amp;<sp/>0xF0)<sp/>|<sp/>_BV(3);<sp/></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="device_8h_1afbdc123b0b82a37ee0e8272c6e39e66c" kindref="member">DAC_PORT</ref><sp/>=<sp/>128;</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="_a_f_s_k_8cpp_1a849ed7993cbf4eeb7976810c3b5f526c" kindref="member">poll_timer</ref>++;</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="_a_f_s_k_8cpp_1a849ed7993cbf4eeb7976810c3b5f526c" kindref="member">poll_timer</ref><sp/>&gt;<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_a_f_s_k_8cpp_1a849ed7993cbf4eeb7976810c3b5f526c" kindref="member">poll_timer</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="_a_f_s_k_8cpp_1ad32c139b02cf1bb92da6d73ecf334785" kindref="member">APRS_poll</ref>();</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="475"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="Weather_Balloon/library/LibAPRS/AFSK.cpp"/>
  </compounddef>
</doxygen>
